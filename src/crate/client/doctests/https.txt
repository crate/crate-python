.. _https_connection:

========================
HTTPS connection support
========================

The CrateDB client is able to connect via HTTPS.

A check against a specific CA certificate can be made by creating the client
with the path to the CA certificate file using the keyword argument
``ca_cert``.

.. note::

    By default, SSL server certificates are verified. To disable verification,
    use the keyword argument ``verify_ssl_cert``. If it is set to ``False``,
    server certificate validation will be skipped.


.. rubric:: Table of Contents

.. contents::
   :local:

Examples
--------

When switching on verification without a ``ca_cert`` file provided, the
connection will fail because we are using a self-signed server certificate::

    >>> verifying_client = HttpClient([crate_host])
    >>> verifying_client.server_infos(crate_host)
    Traceback (most recent call last):
    ...
    crate.client.exceptions.ConnectionError: Server not available, ...certificate verify failed...

Also, when providing an invalid ``ca_cert`` an error is raised::

    >>> verifying_client = HttpClient([crate_host], ca_cert=invalid_ca_cert)
    >>> verifying_client.server_infos(crate_host)
    Traceback (most recent call last):
    ...
    crate.client.exceptions.ConnectionError: Server not available, ...certificate verify failed...

Connecting to a host whose certificate is verified with a valid CA certificate::

    >>> verifying_valid_client = HttpClient([crate_host], ca_cert=valid_ca_cert)
    >>> verifying_valid_client.server_infos(verifying_valid_client._get_server())
    ('https://localhost:65534', 'test', '0.0.0')

When turning off certificate verification, calling the server will succeed::

    >>> non_verifying_client = HttpClient([crate_host], verify_ssl_cert=False)
    >>> non_verifying_client.server_infos(crate_host)
    ('https://localhost:65534', 'test', '0.0.0')

Without verification, calling the server will even work when using an invalid
``ca_cert``::

    >>> non_verifying_client = HttpClient([crate_host], verify_ssl_cert=False, ca_cert=invalid_ca_cert)
    >>> non_verifying_client.server_infos(crate_host)
    ('https://localhost:65534', 'test', '0.0.0')


Client certificate
------------------

The client supports client certificates.

The ``HttpClient`` constructor takes two keyword arguments: ``cert_file`` and
``key_file``. Both should be a string pointing to the path of the client
certificate and key file.

This example uses that options, however it fails because the certificate is
invalid::

    >>> client = HttpClient([crate_host], cert_file=invalid_ca_cert, key_file=invalid_ca_cert, timeout=10)
    >>> client.server_infos(crate_host)
    Traceback (most recent call last):
    ...
    crate.client.exceptions.ConnectionError: Server not available, exception: ...[SSL: ...
